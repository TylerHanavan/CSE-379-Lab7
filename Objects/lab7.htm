<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\lab7.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\lab7.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Tue May 01 22:22:40 2018
<BR><P>
<H3>Maximum Stack Usage =         60 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
do_tick &rArr; draw_board &rArr; get_char_at &rArr; is_shield
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[5]">Reset_Handler</a>
 <LI><a href="#[1d]">__user_initial_stackheap</a>
 <LI><a href="#[36]">lab7</a>
 <LI><a href="#[b]">FIQ_Handler</a>
 <LI><a href="#[37]">uart_init</a>
 <LI><a href="#[38]">pin_connect_block_setup_for_uart0</a>
 <LI><a href="#[39]">setup_pins</a>
 <LI><a href="#[6c]">validate_input</a>
 <LI><a href="#[6d]">from_ascii</a>
 <LI><a href="#[3e]">toggle_seven_seg</a>
 <LI><a href="#[6e]">change_display</a>
 <LI><a href="#[6f]">change_display_digit</a>
 <LI><a href="#[3c]">clear_display</a>
 <LI><a href="#[3b]">read_character</a>
 <LI><a href="#[2e]">output_character</a>
 <LI><a href="#[3a]">output_string</a>
 <LI><a href="#[3d]">new_line</a>
 <LI><a href="#[6]">Undef_Handler</a>
 <LI><a href="#[7]">SWI_Handler</a>
 <LI><a href="#[8]">PAbt_Handler</a>
 <LI><a href="#[9]">DAbt_Handler</a>
 <LI><a href="#[a]">IRQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">Undef_Handler</a><BR>
 <LI><a href="#[7]">SWI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">SWI_Handler</a><BR>
 <LI><a href="#[8]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PAbt_Handler</a><BR>
 <LI><a href="#[9]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">DAbt_Handler</a><BR>
 <LI><a href="#[a]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">IRQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[9]">DAbt_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[b]">FIQ_Handler</a> from lab7.o(interrupts) referenced from startup.o(RESET)
 <LI><a href="#[a]">IRQ_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[8]">PAbt_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[7]">SWI_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6]">Undef_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[e]">__main</a> from __main.o(!!!main) referenced from startup.o(RESET)
 <LI><a href="#[3]">do_tick</a> from library.o(i.do_tick) referenced 2 times from lab7.o(interrupts)
 <LI><a href="#[4]">handle_input</a> from library.o(i.handle_input) referenced 2 times from lab7.o(interrupts)
 <LI><a href="#[d]">main</a> from lab7wrapper.o(i.main) referenced from __rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[f]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[11]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[3f]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[40]"></a>__decompress</STRONG> (ARM, 96 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[41]"></a>__decompress2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[42]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[15]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via Veneer)
</UL>

<P><STRONG><a name="[43]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[44]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[45]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[46]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[47]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[48]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[49]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[4a]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[4b]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[4c]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[4d]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[4e]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[4f]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[50]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[51]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[52]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[53]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[54]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[55]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[56]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[57]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[19]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via Veneer)
</UL>

<P><STRONG><a name="[58]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[59]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[5a]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[5b]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[5c]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[5d]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[5e]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[10]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[5f]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[12]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[14]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[60]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[16]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; exit
</UL>
<BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[61]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[1f]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via Veneer)
</UL>

<P><STRONG><a name="[18]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via Veneer)
</UL>

<P><STRONG><a name="[62]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[1a]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit (via Veneer)
</UL>

<P><STRONG><a name="[1d]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[63]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>__aeabi_idivmod</STRONG> (ARM, 384 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_tick
</UL>

<P><STRONG><a name="[64]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[13]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[17]"></a>exit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via Veneer)
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[67]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1c]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[68]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1b]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit (via Veneer)
</UL>

<P><STRONG><a name="[69]"></a>__I$use$semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>__semihosting_library_function</STRONG> (ARM, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[20]"></a>collides</STRONG> (ARM, 332 bytes, Stack size 16 bytes, library.o(i.collides))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = collides &rArr; is_shield
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_shield_type
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_shield_alive
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_score_level
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_enemy_alive
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_shield_alive
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_shield
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_shield_type_int
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_shield_from_coordinates
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_enemy_type
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_enemy_from_coordinates
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_enemy_alive
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_tick
</UL>

<P><STRONG><a name="[3]"></a>do_tick</STRONG> (ARM, 228 bytes, Stack size 8 bytes, library.o(i.do_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = do_tick &rArr; draw_board &rArr; get_char_at &rArr; is_shield
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_board
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collides
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lab7.o(interrupts)
</UL>
<P><STRONG><a name="[2d]"></a>draw_board</STRONG> (ARM, 80 bytes, Stack size 16 bytes, library.o(i.draw_board))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = draw_board &rArr; get_char_at &rArr; is_shield
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_character (via Veneer)
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pseudo_printf
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_char_at
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_tick
</UL>

<P><STRONG><a name="[2f]"></a>get_char_at</STRONG> (ARM, 252 bytes, Stack size 20 bytes, library.o(i.get_char_at))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = get_char_at &rArr; is_shield
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_shield
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_player_bullet
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_player
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_shield_type
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_enemy_type
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_enemy_from_coordinates
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_enemy_char
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_enemy_alive
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_board
</UL>

<P><STRONG><a name="[28]"></a>get_enemy_alive</STRONG> (ARM, 60 bytes, Stack size 0 bytes, library.o(i.get_enemy_alive))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_char_at
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collides
</UL>

<P><STRONG><a name="[34]"></a>get_enemy_char</STRONG> (ARM, 44 bytes, Stack size 0 bytes, library.o(i.get_enemy_char))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_char_at
</UL>

<P><STRONG><a name="[27]"></a>get_enemy_from_coordinates</STRONG> (ARM, 92 bytes, Stack size 0 bytes, library.o(i.get_enemy_from_coordinates))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_char_at
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collides
</UL>

<P><STRONG><a name="[2a]"></a>get_enemy_type</STRONG> (ARM, 44 bytes, Stack size 0 bytes, library.o(i.get_enemy_type))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_char_at
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collides
</UL>

<P><STRONG><a name="[22]"></a>get_shield_from_coordinates</STRONG> (ARM, 212 bytes, Stack size 0 bytes, library.o(i.get_shield_from_coordinates))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_shield
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_shield_type_int
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_shield_type
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collides
</UL>

<P><STRONG><a name="[31]"></a>get_shield_type</STRONG> (ARM, 72 bytes, Stack size 12 bytes, library.o(i.get_shield_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_shield_type
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_shield_from_coordinates
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_char_at
</UL>

<P><STRONG><a name="[24]"></a>get_shield_type_int</STRONG> (ARM, 72 bytes, Stack size 12 bytes, library.o(i.get_shield_type_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_shield_type_int
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_shield_from_coordinates
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collides
</UL>

<P><STRONG><a name="[4]"></a>handle_input</STRONG> (ARM, 100 bytes, Stack size 4 bytes, library.o(i.handle_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = handle_input
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shoot
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lab7.o(interrupts)
</UL>
<P><STRONG><a name="[32]"></a>is_player</STRONG> (ARM, 52 bytes, Stack size 0 bytes, library.o(i.is_player))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_char_at
</UL>

<P><STRONG><a name="[33]"></a>is_player_bullet</STRONG> (ARM, 52 bytes, Stack size 0 bytes, library.o(i.is_player_bullet))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_char_at
</UL>

<P><STRONG><a name="[21]"></a>is_shield</STRONG> (ARM, 40 bytes, Stack size 16 bytes, library.o(i.is_shield))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = is_shield
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_shield_alive
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_shield_from_coordinates
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_char_at
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collides
</UL>

<P><STRONG><a name="[23]"></a>is_shield_alive</STRONG> (ARM, 60 bytes, Stack size 0 bytes, library.o(i.is_shield_alive))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_shield
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collides
</UL>

<P><STRONG><a name="[d]"></a>main</STRONG> (ARM, 20 bytes, Stack size 8 bytes, lab7wrapper.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = main
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lab7 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[30]"></a>pseudo_printf</STRONG> (ARM, 40 bytes, Stack size 8 bytes, library.o(i.pseudo_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = pseudo_printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_character (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_board
</UL>

<P><STRONG><a name="[29]"></a>set_enemy_alive</STRONG> (ARM, 64 bytes, Stack size 0 bytes, library.o(i.set_enemy_alive))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collides
</UL>

<P><STRONG><a name="[2b]"></a>set_score_level</STRONG> (ARM, 88 bytes, Stack size 0 bytes, library.o(i.set_score_level))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collides
</UL>

<P><STRONG><a name="[25]"></a>set_shield_alive</STRONG> (ARM, 64 bytes, Stack size 0 bytes, library.o(i.set_shield_alive))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collides
</UL>

<P><STRONG><a name="[26]"></a>set_shield_type</STRONG> (ARM, 64 bytes, Stack size 0 bytes, library.o(i.set_shield_type))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collides
</UL>

<P><STRONG><a name="[35]"></a>shoot</STRONG> (ARM, 56 bytes, Stack size 0 bytes, library.o(i.shoot))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
</UL>

<P><STRONG><a name="[36]"></a>lab7</STRONG> (ARM, 0 bytes, Stack size unknown bytes, lab7.o(interrupts))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_pins
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_character
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_connect_block_setup_for_uart0
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_string
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_display
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
</UL>

<P><STRONG><a name="[b]"></a>FIQ_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, lab7.o(interrupts))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toggle_seven_seg
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_character
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_line
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>uart_init</STRONG> (ARM, 0 bytes, Stack size unknown bytes, library7.o(library7))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lab7
</UL>

<P><STRONG><a name="[38]"></a>pin_connect_block_setup_for_uart0</STRONG> (ARM, 0 bytes, Stack size unknown bytes, library7.o(library7))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lab7
</UL>

<P><STRONG><a name="[39]"></a>setup_pins</STRONG> (ARM, 0 bytes, Stack size unknown bytes, library7.o(library7))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lab7
</UL>

<P><STRONG><a name="[6c]"></a>validate_input</STRONG> (ARM, 0 bytes, Stack size unknown bytes, library7.o(library7), UNUSED)

<P><STRONG><a name="[6d]"></a>from_ascii</STRONG> (ARM, 0 bytes, Stack size unknown bytes, library7.o(library7), UNUSED)

<P><STRONG><a name="[3e]"></a>toggle_seven_seg</STRONG> (ARM, 0 bytes, Stack size unknown bytes, library7.o(library7))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_display
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>

<P><STRONG><a name="[6e]"></a>change_display</STRONG> (ARM, 0 bytes, Stack size unknown bytes, library7.o(library7), UNUSED)

<P><STRONG><a name="[6f]"></a>change_display_digit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, library7.o(library7), UNUSED)

<P><STRONG><a name="[3c]"></a>clear_display</STRONG> (ARM, 0 bytes, Stack size unknown bytes, library7.o(library7))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toggle_seven_seg
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lab7
</UL>

<P><STRONG><a name="[3b]"></a>read_character</STRONG> (ARM, 0 bytes, Stack size unknown bytes, library7.o(library7))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lab7
</UL>

<P><STRONG><a name="[2e]"></a>output_character</STRONG> (ARM, 0 bytes, Stack size unknown bytes, library7.o(library7))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pseudo_printf (via Veneer)
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_board (via Veneer)
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_string
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_line
</UL>

<P><STRONG><a name="[3a]"></a>output_string</STRONG> (ARM, 0 bytes, Stack size unknown bytes, library7.o(library7))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_character
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_line
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lab7
</UL>

<P><STRONG><a name="[3d]"></a>new_line</STRONG> (ARM, 0 bytes, Stack size unknown bytes, library7.o(library7))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_character
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_string
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[6]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>IRQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[1e]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
