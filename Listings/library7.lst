


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             library7, CODE, READWRITE
    2 00000000                 EXPORT           uart_init
    3 00000000                 EXPORT           pin_connect_block_setup_for_uar
t0
    4 00000000                 EXPORT           setup_pins
    5 00000000                 EXPORT           validate_input
    6 00000000                 EXPORT           toggle_seven_seg
    7 00000000                 EXPORT           read_character
    8 00000000                 EXPORT           output_character
    9 00000000                 EXPORT           output_string
   10 00000000                 EXPORT           new_line
   11 00000000                 EXPORT           clear_display
   12 00000000                 EXPORT           change_display
   13 00000000         
   14 00000000                 EXPORT           change_display_digit
   15 00000000         
   16 00000000                 EXPORT           from_ascii
   17 00000000         
   18 00000000         digits_SET
   19 00000000 00003780        DCD              0x00003780  ; 0 
   20 00000004 00003000        DCD              0x00003000  ; 1  
   21 00000008 00009580        DCD              0x00009580  ; 2
   22 0000000C 00008780        DCD              0x00008780  ; 3
   23 00000010 0000A300        DCD              0x0000A300  ; 4
   24 00000014 0000A680        DCD              0x0000A680  ; 5
   25 00000018 0000B680        DCD              0x0000B680  ; 6
   26 0000001C 00000380        DCD              0x00000380  ; 7
   27 00000020 0000B780        DCD              0x0000B780  ; 8
   28 00000024 0000A380        DCD              0x0000A380  ; 9
   29 00000028 0000B380        DCD              0x0000B380  ; A
   30 0000002C 0000B600        DCD              0x0000B600  ; B
   31 00000030 00003480        DCD              0x00003480  ; C
   32 00000034 00009700        DCD              0x00009700  ; D
   33 00000038 0000B480        DCD              0x0000B480  ; E
   34 0000003C 0000B080        DCD              0x0000B080  ; F 
   35 00000040                 ALIGN
   36 00000040         
   37 00000040         uart_init
   38 00000040 E92D4000        STMFD            SP!,{lr}    ;push link register
                                                             to stack
   39 00000044 E59F02B8        LDR              r0, =0xE000C00C ;loads the memo
                                                            ry address 0xE000C0
                                                            0C into r0
   40 00000048 E3A01083        MOV              r1, #131    ;copies decimal 131
                                                             into r1
   41 0000004C E5801000        STR              r1, [r0]    ;stores r1 into the
                                                             memory address at 
                                                            r0
   42 00000050 E59F02B0        LDR              r0, =0xE000C000 ;loads the memo
                                                            ry address 0xE000C0
                                                            00 into r0
   43 00000054 E3A01021        MOV              r1, #33     ;copies decimal 120
                                                             into r1 / U0DLL
   44 00000058 E5801000        STR              r1, [r0]    ;stores r1 into the
                                                             memory address at 
                                                            r0
   45 0000005C E59F02A8        LDR              r0, =0xE000C004 ;loads the memo
                                                            ry address 0xE000C0
                                                            04 into r0



ARM Macro Assembler    Page 2 


   46 00000060 E3A01000        MOV              r1, #0      ;copies decimal 0 i
                                                            nto r1 / U0DLM
   47 00000064 E5801000        STR              r1, [r0]    ;stores r1 into the
                                                             memory address at 
                                                            r0
   48 00000068 E59F0294        LDR              r0, =0xE000C00C ;loads the memo
                                                            ry address 0xE000C0
                                                            0C into r0
   49 0000006C E3A01003        MOV              r1, #3      ;copies decimal 3 i
                                                            nto r1
   50 00000070 E5801000        STR              r1, [r0]    ;stores r1 into the
                                                             memory address at 
                                                            r0
   51 00000074         ;uart0 baud rate = PCLK / 16 * (16 * UART0DLM + U0DLL)
   52 00000074         ;18.432
   53 00000074 E8BD4000        LDMFD            sp!, {lr}   ;pop link register 
                                                            from stack
   54 00000078 E12FFF1E        BX               lr          ;move pc,lr
   55 0000007C         
   56 0000007C         
   57 0000007C         pin_connect_block_setup_for_uart0
   58 0000007C E92D4003        STMFD            sp!, {r0, r1, lr} ;Push stack
   59 00000080 E59F0288        LDR              r0, =0xE002C000 ; PINSEL0 load 
                                                            pinsel0 r0
   60 00000084 E5901000        LDR              r1, [r0]    ;Load pinsel0 conte
                                                            nts to r1
   61 00000088 E3811005        ORR              r1, r1, #5  ; Or with 5 dec.
   62 0000008C E3C1100A        BIC              r1, r1, #0xA 
                                                            ; Clear against 0xA
                                                            
   63 00000090 E5801000        STR              r1, [r0]    ; Store results to 
                                                            r0 in memory
   64 00000094 E8BD4003        LDMFD            sp!, {r0, r1, lr} ;Pop stack
   65 00000098 E12FFF1E        BX               lr          ;Branch back
   66 0000009C         
   67 0000009C         setup_pins
   68 0000009C E92D400E        STMFD            SP!,{lr, r1, r2, r3}
   69 000000A0         
   70 000000A0 E59F126C        LDR              r1, =0xE0028008 ;IODIR for Seve
                                                            n-Seg
   71 000000A4 E59F326C        LDR              r3, =0xB784 ;Load 0xB784 (for b
                                                            it manipulation) to
                                                             r3
   72 000000A8 E5813000        STR              r3, [r1]    ;store results to r
                                                            1
   73 000000AC         
   74 000000AC E8BD400E        LDMFD            sp!, {lr, r1, r2, r3}
   75 000000B0 E12FFF1E        BX               lr
   76 000000B4         
   77 000000B4         validate_input                       ;checks that the in
                                                            putted value (r0) i
                                                            s either hexadecima
                                                            l or 'q'
   78 000000B4 E92D400E        STMFD            SP!, {lr, r1, r2, r3} ;returns 
                                                            output as boolean i
                                                            n (r4)
   79 000000B8         
   80 000000B8 E3500071        CMP              r0, #0x71   ;'q'
   81 000000BC 0A00008F        BEQ              quit



ARM Macro Assembler    Page 3 


   82 000000C0         
   83 000000C0 E350000D        CMP              r0, #0xD
   84 000000C4 0A000007        BEQ              vi_valid_number
   85 000000C8         
   86 000000C8         ; CMP r9, #0    ;not accepting input (bar 'q') when disp
                       lay is off
   87 000000C8         ; BEQ vi_invalid  
   88 000000C8         
   89 000000C8 E3500030        CMP              r0, #0x30   ;<0x30 invalid
   90 000000CC BA000009        BLT              vi_invalid
   91 000000D0         
   92 000000D0 E3500046        CMP              r0, #0x46   ;>0x66 invalid
   93 000000D4 CA000007        BGT              vi_invalid
   94 000000D8         
   95 000000D8 E3500039        CMP              r0, #0x39   ;<=0x39 valid numbe
                                                            r
   96 000000DC DA000001        BLE              vi_valid_number
   97 000000E0         
   98 000000E0 E3500041        CMP              r0, #0x41   ;>=0x41 valid upper
                                                            case letter
   99 000000E4 AA000001        BGE              vi_valid_letter_upper
  100 000000E8         
  101 000000E8         vi_valid_number
  102 000000E8         
  103 000000E8 E3A04001        MOV              r4, #1      ;return 1 for r4
  104 000000EC         
  105 000000EC EA000002        B                vi_exit
  106 000000F0         
  107 000000F0         vi_valid_letter_upper
  108 000000F0         
  109 000000F0 E3A04001        MOV              r4, #1      ;return 1 for r4
  110 000000F4         
  111 000000F4 EA000000        B                vi_exit
  112 000000F8         
  113 000000F8         vi_invalid
  114 000000F8         
  115 000000F8 E3A04000        MOV              r4, #0      ;return 0 for r4
  116 000000FC         
  117 000000FC         vi_exit
  118 000000FC         
  119 000000FC E8BD400E        LDMFD            SP!, {lr, r1, r2, r3}
  120 00000100 E12FFF1E        BX               lr
  121 00000104         
  122 00000104         from_ascii                           ; converts (singe-d
                                                            igit) number at r0 
                                                            from ascii number t
                                                            o normal number, re
                                                            turning at r4
  123 00000104 E92D400E        STMFD            SP!, {lr, r1, r2, r3}
  124 00000108         
  125 00000108 E3500039        CMP              r0, #0x39
  126 0000010C DA000000        BLE              fa_number
  127 00000110         
  128 00000110 EA000001        B                fa_upper
  129 00000114         
  130 00000114         fa_number
  131 00000114         
  132 00000114 E2404030        SUB              r4, r0, #0x30
  133 00000118         



ARM Macro Assembler    Page 4 


  134 00000118 EA000001        B                fa_exit
  135 0000011C         
  136 0000011C         fa_upper
  137 0000011C         
  138 0000011C E2404041        SUB              r4, r0, #0x41
  139 00000120 E284400A        ADD              r4, r4, #10
  140 00000124         
  141 00000124         fa_exit
  142 00000124         
  143 00000124 E8BD400E        LDMFD            SP!, {lr, r1, r2, r3}
  144 00000128 E12FFF1E        BX               lr
  145 0000012C         
  146 0000012C         toggle_seven_seg
  147 0000012C E92D4001        STMFD            SP!, {lr, r0}
  148 00000130         
  149 00000130 E3590000        CMP              r9, #0      ;check if seven seg
                                                             is off
  150 00000134 1A000002        BNE              tss_off
  151 00000138         
  152 00000138         tss_on
  153 00000138         
  154 00000138 E3A09001        MOV              r9, #1      ;set the flag to #1
                                                             (r9) to say seven 
                                                            seg is on
  155 0000013C         
  156 0000013C E1A00006        MOV              r0, r6
  157 00000140         
  158 00000140         ; BL change_display   ;change display
  159 00000140         
  160 00000140         
  161 00000140 EA000001        B                tss_exit
  162 00000144         
  163 00000144         tss_off
  164 00000144         
  165 00000144 E3A09000        MOV              r9, #0      ;set the flag to #0
                                                             (r9) to say seven 
                                                            seg is off
  166 00000148 EBFFFFFE        BL               clear_display ;clear (turn off)
                                                             display
  167 0000014C         
  168 0000014C         
  169 0000014C         tss_exit
  170 0000014C         
  171 0000014C E8BD4001        LDMFD            SP!, {lr, r0}
  172 00000150 E12FFF1E        BX               lr
  173 00000154         
  174 00000154         change_display                       ;Displays hex value
                                                             passed in r0
  175 00000154 E92D400E        STMFD            SP!,{lr, r1, r2, r3}
  176 00000158         
  177 00000158 E3A09001        MOV              r9, #1
  178 0000015C E1A06000        MOV              r6, r0
  179 00000160         
  180 00000160 E59F11B4        LDR              r1, =0xE0028000 ; Base address 
                                                            
  181 00000164 E59F31B4        LDR              r3, =digits_SET
  182 00000168 E1A00100        MOV              r0, r0, LSL #2 ; Each stored va
                                                            lue is 32 bits 
  183 0000016C E7932000        LDR              r2, [r3, r0] ; Load IOSET patte



ARM Macro Assembler    Page 5 


                                                            rn for digit in r0 
                                                            
  184 00000170 E5812004        STR              r2, [r1, #4] ; Display (0x4 = o
                                                            ffset to IOSET) 
  185 00000174         
  186 00000174 E8BD400E        LDMFD            sp!, {lr, r1, r2, r3}
  187 00000178 E12FFF1E        BX               lr
  188 0000017C         
  189 0000017C         change_display_digit                 ;Displays hex value
                                                             passed in r0 at di
                                                            git r4
  190 0000017C E92D402E        STMFD            SP!,{lr, r1, r2, r3, r5}
  191 00000180         
  192 00000180 E3A0500F        MOV              r5, #0xF    ;mask
  193 00000184 E1A05105        MOV              r5, r5, LSL #2
  194 00000188         
  195 00000188 E3540000        CMP              r4, #0
  196 0000018C 0A000005        BEQ              mask_0
  197 00000190         
  198 00000190 E3540001        CMP              r4, #1
  199 00000194 0A000009        BEQ              mask_1
  200 00000198         
  201 00000198 E3540002        CMP              r4, #2
  202 0000019C 0A00000D        BEQ              mask_2
  203 000001A0         
  204 000001A0 E3540003        CMP              r4, #3
  205 000001A4 0A000011        BEQ              mask_3
  206 000001A8         
  207 000001A8         mask_0
  208 000001A8         
  209 000001A8 E3C55004        BIC              r5, r5, #4
  210 000001AC E59F1160        LDR              r1, =0xE0028008
  211 000001B0 E5912000        LDR              r2, [r1]
  212 000001B4 E1822005        ORR              r2, r2, r5
  213 000001B8 E5812000        STR              r2, [r1]
  214 000001BC         
  215 000001BC EA000011        B                mask_done
  216 000001C0         
  217 000001C0         mask_1
  218 000001C0         
  219 000001C0 E3C55008        BIC              r5, r5, #8
  220 000001C4 E59F1148        LDR              r1, =0xE0028008
  221 000001C8 E5912000        LDR              r2, [r1]
  222 000001CC E1822005        ORR              r2, r2, r5
  223 000001D0 E5812000        STR              r2, [r1]
  224 000001D4         
  225 000001D4 EA00000B        B                mask_done
  226 000001D8         
  227 000001D8         mask_2
  228 000001D8         
  229 000001D8 E3C55010        BIC              r5, r5, #0x10
  230 000001DC E59F1130        LDR              r1, =0xE0028008
  231 000001E0 E5912000        LDR              r2, [r1]
  232 000001E4 E1822005        ORR              r2, r2, r5
  233 000001E8 E5812000        STR              r2, [r1]
  234 000001EC         
  235 000001EC EA000005        B                mask_done
  236 000001F0         
  237 000001F0         mask_3



ARM Macro Assembler    Page 6 


  238 000001F0         
  239 000001F0 E3C55020        BIC              r5, r5, #0x20
  240 000001F4 E59F1118        LDR              r1, =0xE0028008
  241 000001F8 E5912000        LDR              r2, [r1]
  242 000001FC E1822005        ORR              r2, r2, r5
  243 00000200 E5812000        STR              r2, [r1]
  244 00000204         
  245 00000204 EAFFFFFF        B                mask_done
  246 00000208         
  247 00000208         mask_done
  248 00000208         
  249 00000208 E3A09001        MOV              r9, #1
  250 0000020C E59F1110        LDR              r1, =0xE0028004 ; Base address 
                                                            
  251 00000210 E59F3108        LDR              r3, =digits_SET
  252 00000214 E1A00100        MOV              r0, r0, LSL #2 ; Each stored va
                                                            lue is 32 bits 
  253 00000218 E7932000        LDR              r2, [r3, r0] ; Load IOSET patte
                                                            rn for digit in r0 
                                                            
  254 0000021C         ;MOV r5, r5, LSL #2
  255 0000021C E1822005        ORR              r2, r2, r5
  256 00000220 E5812000        STR              r2, [r1]    ; Display (0x4 = of
                                                            fset to IOSET) 
  257 00000224         
  258 00000224 E8BD402E        LDMFD            sp!, {lr, r1, r2, r3, r5}
  259 00000228 E12FFF1E        BX               lr
  260 0000022C         
  261 0000022C         clear_display
  262 0000022C E92D4006        STMFD            SP!,{lr, r1, r2}
  263 00000230         
  264 00000230 E59F10F0        LDR              r1, =0xE002800C 
                                                            ;Load P0xCLR to r1
  265 00000234 E59F20F0        LDR              r2, =0xB7BC ;Load number (to r2
                                                            ) for bits of seven
                                                            -segment display
  266 00000238 E5812000        STR              r2, [r1]    ;Store number in P0
                                                            xClr at r1
  267 0000023C         
  268 0000023C E8BD4006        LDMFD            sp!, {lr, r1, r2}
  269 00000240 E12FFF1E        BX               lr
  270 00000244         
  271 00000244         read_character                       ;Begin Receive Char
                                                            acter block
  272 00000244 E92D4038        STMFD            SP!,{lr, r3, r4, r5}
  273 00000248         read_character_2
  274 00000248 E59F30E0        LDR              r3, =0xE000C014 ;loads the addr
                                                            ess of uart0 into r
                                                            egister r3 
  275 0000024C         
  276 0000024C E5D34000        LDRB             r4, [r3]    ;loads the bytes at
                                                             address r3 into r4
                                                             (RXFE - RDR)
  277 00000250         
  278 00000250 E3A05001        MOV              r5, #1      ;immediate value 1 
                                                            is copied into r5
  279 00000254 E0045005        AND              r5, r4, r5  ;logically AND r4 a
                                                            nd r5 to compare th
                                                            e LSB(RDR) of r4



ARM Macro Assembler    Page 7 


  280 00000258         
  281 00000258         ;CMP r5, #1   ;if the value of r5 is one, we are ready t
                       o receive data
  282 00000258         ;BNE read_character_2  ;else redo the process
  283 00000258         
  284 00000258         ; Receiving
  285 00000258         
  286 00000258 E59F30A8        LDR              r3, =0xE000C000 ;loads the addr
                                                            ess of the receive 
                                                            buffer register int
                                                            o r5
  287 0000025C E5930000        LDR              r0, [r3]    ;hex value at r3 is
                                                             loaded into r0
  288 00000260         read_character_break
  289 00000260 E8BD4038        LDMFD            sp!, {lr, r3, r4, r5}
  290 00000264 E12FFF1E        BX               lr
  291 00000268         
  292 00000268         output_character                     ;Begin Transmit Cha
                                                            racter block
  293 00000268 E92D4068        STMFD            SP!,{lr, r3, r6, r5}
  294 0000026C         output_character_2
  295 0000026C E59F30BC        LDR              r3, =0xE000C014 ;loads address 
                                                            of uart0 into regis
                                                            ter r3
  296 00000270         
  297 00000270 E5D36000        LDRB             r6, [r3]    ;loads bytes at add
                                                            ress r3 into r6 (RX
                                                            FE - RDR)
  298 00000274         
  299 00000274 E3A05020        MOV              r5, #32     ;immediate value 32
                                                             (00010000) copied 
                                                            into r5  
  300 00000278 E0065005        AND              r5, r6, r5  ;logically AND r6 a
                                                            nd r5 to compare th
                                                            e 5th bit(THRE) of 
                                                            r6
  301 0000027C         
  302 0000027C E3550020        CMP              r5, #32     ;if the fifth bit i
                                                            s 1, then we are re
                                                            ady to transmit
  303 00000280 1AFFFFF9        BNE              output_character_2 ;else we red
                                                            o the process
  304 00000284         
  305 00000284         ; Transmitting
  306 00000284         
  307 00000284 E59F507C        LDR              r5, =0xE000C000 ;loads the addr
                                                            ess of the transmit
                                                             holding register (
                                                            same as receive buf
                                                            fer)
  308 00000288         
  309 00000288 E5850000        STR              r0, [r5]    ;stores the value o
                                                            f r0 into the addre
                                                            ss at r5
  310 0000028C E8BD4068        LDMFD            sp!, {lr, r3, r6, r5}
  311 00000290 E12FFF1E        BX               lr
  312 00000294         
  313 00000294         output_string
  314 00000294 E92D4003        STMFD            SP!,{lr, r0, r1}



ARM Macro Assembler    Page 8 


  315 00000298         
  316 00000298         output_string_2
  317 00000298 E4D40001        LDRB             r0, [r4], #1 ;Load =prompt cont
                                                            ents from memory (r
                                                            4) to r0, one byte 
                                                            at a time. Then inc
                                                            rements memory addr
                                                            ess, r4, by 1.
  318 0000029C EBFFFFFE        BL               output_character ;Branch and li
                                                            nk to output_charac
                                                            ter
  319 000002A0         
  320 000002A0 E3500000        CMP              r0,#0       ;compares r0 to nul
                                                            l terminator
  321 000002A4 1AFFFFFB        BNE              output_string_2 ;if equal we co
                                                            ntinue on with prog
                                                            ram
  322 000002A8         
  323 000002A8 EBFFFFFE        BL               new_line
  324 000002AC         
  325 000002AC E8BD4003        LDMFD            sp!, {lr, r0, r1}
  326 000002B0 E12FFF1E        BX               lr
  327 000002B4         
  328 000002B4         new_line
  329 000002B4 E92D4401        STMFD            SP!,{lr, r0, r10}
  330 000002B8         ;MOV r10, r0     ;saves contents of r0 into r10 before u
                       sing it
  331 000002B8 E3A0000A        MOV              r0, #0xA    ;new line character
                                                             copied into r0
  332 000002BC EBFFFFFE        BL               output_character ;branch and li
                                                            nk to output charac
                                                            ter
  333 000002C0 E3A0000D        MOV              r0, #0xD    ;carriage return co
                                                            pied into r0
  334 000002C4 EBFFFFFE        BL               output_character ;branch and li
                                                            nk to output charac
                                                            ter
  335 000002C8         ;MOV r0, r10     ;takes saved content from r10 and copie
                       s into r0
  336 000002C8 E8BD4401        LDMFD            sp!, {lr, r0, r10}
  337 000002CC E12FFF1E        BX               lr
  338 000002D0         
  339 000002D0         gi_fix
  340 000002D0 E3A01030        MOV              r1, #0x30
  341 000002D4         
  342 000002D4         gi_end
  343 000002D4 E1A00001        MOV              r0, r1
  344 000002D8         
  345 000002D8 E8BD403E        LDMFD            SP!, {lr, r1-r5}
  346 000002DC E12FFF1E        BX               lr
  347 000002E0         
  348 000002E0         to_mem                               ;r0 - memory addres
                                                            s, r1 - contents
  349 000002E0 E92D403C        STMFD            SP!, {lr, r2-r5}
  350 000002E4         
  351 000002E4 E5C01000        STRB             r1, [r0]
  352 000002E8         
  353 000002E8 E8BD403C        LDMFD            SP!, {lr, r2-r5}
  354 000002EC E12FFF1E        BX               lr



ARM Macro Assembler    Page 9 


  355 000002F0         
  356 000002F0         from_mem                             ;r0 - memory addres
                                                            s, return contents 
                                                            - r1
  357 000002F0 E92D403C        STMFD            SP!, {lr, r2-r5}
  358 000002F4         
  359 000002F4 E5D01000        LDRB             r1, [r0]
  360 000002F8         
  361 000002F8 E8BD403C        LDMFD            SP!, {lr, r2-r5}
  362 000002FC E12FFF1E        BX               lr
  363 00000300         
  364 00000300         quit
  365 00000300 E3A07005        MOV              r7, #5
  366 00000304                 END
              E000C00C 
              E000C000 
              E000C004 
              E002C000 
              E0028008 
              0000B784 
              E0028000 
              00000000 
              E0028004 
              E002800C 
              0000B7BC 
              E000C014 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\library7.d -o.\objects\library7.o -ID:\Keil\ARM\ARM\RV31\INC -ID:\Keil\A
RM\ARM\CMSIS\Include -ID:\Keil\ARM\ARM\INC\Philips --predefine="__EVAL SETA 1" 
--predefine="__UVISION_VERSION SETA 524" --list=.\listings\library7.lst library
7.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

change_display 00000154

Symbol: change_display
   Definitions
      At line 174 in file library7.s
   Uses
      At line 12 in file library7.s
Comment: change_display used once
change_display_digit 0000017C

Symbol: change_display_digit
   Definitions
      At line 189 in file library7.s
   Uses
      At line 14 in file library7.s
Comment: change_display_digit used once
clear_display 0000022C

Symbol: clear_display
   Definitions
      At line 261 in file library7.s
   Uses
      At line 11 in file library7.s
      At line 166 in file library7.s

digits_SET 00000000

Symbol: digits_SET
   Definitions
      At line 18 in file library7.s
   Uses
      At line 181 in file library7.s
      At line 251 in file library7.s

fa_exit 00000124

Symbol: fa_exit
   Definitions
      At line 141 in file library7.s
   Uses
      At line 134 in file library7.s
Comment: fa_exit used once
fa_number 00000114

Symbol: fa_number
   Definitions
      At line 130 in file library7.s
   Uses
      At line 126 in file library7.s
Comment: fa_number used once
fa_upper 0000011C

Symbol: fa_upper
   Definitions
      At line 136 in file library7.s
   Uses
      At line 128 in file library7.s
Comment: fa_upper used once
from_ascii 00000104



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: from_ascii
   Definitions
      At line 122 in file library7.s
   Uses
      At line 16 in file library7.s
Comment: from_ascii used once
from_mem 000002F0

Symbol: from_mem
   Definitions
      At line 356 in file library7.s
   Uses
      None
Comment: from_mem unused
gi_end 000002D4

Symbol: gi_end
   Definitions
      At line 342 in file library7.s
   Uses
      None
Comment: gi_end unused
gi_fix 000002D0

Symbol: gi_fix
   Definitions
      At line 339 in file library7.s
   Uses
      None
Comment: gi_fix unused
library7 00000000

Symbol: library7
   Definitions
      At line 1 in file library7.s
   Uses
      None
Comment: library7 unused
mask_0 000001A8

Symbol: mask_0
   Definitions
      At line 207 in file library7.s
   Uses
      At line 196 in file library7.s
Comment: mask_0 used once
mask_1 000001C0

Symbol: mask_1
   Definitions
      At line 217 in file library7.s
   Uses
      At line 199 in file library7.s
Comment: mask_1 used once
mask_2 000001D8

Symbol: mask_2
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 227 in file library7.s
   Uses
      At line 202 in file library7.s
Comment: mask_2 used once
mask_3 000001F0

Symbol: mask_3
   Definitions
      At line 237 in file library7.s
   Uses
      At line 205 in file library7.s
Comment: mask_3 used once
mask_done 00000208

Symbol: mask_done
   Definitions
      At line 247 in file library7.s
   Uses
      At line 215 in file library7.s
      At line 225 in file library7.s
      At line 235 in file library7.s
      At line 245 in file library7.s

new_line 000002B4

Symbol: new_line
   Definitions
      At line 328 in file library7.s
   Uses
      At line 10 in file library7.s
      At line 323 in file library7.s

output_character 00000268

Symbol: output_character
   Definitions
      At line 292 in file library7.s
   Uses
      At line 8 in file library7.s
      At line 318 in file library7.s
      At line 332 in file library7.s
      At line 334 in file library7.s

output_character_2 0000026C

Symbol: output_character_2
   Definitions
      At line 294 in file library7.s
   Uses
      At line 303 in file library7.s
Comment: output_character_2 used once
output_string 00000294

Symbol: output_string
   Definitions
      At line 313 in file library7.s
   Uses
      At line 9 in file library7.s
Comment: output_string used once



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

output_string_2 00000298

Symbol: output_string_2
   Definitions
      At line 316 in file library7.s
   Uses
      At line 321 in file library7.s
Comment: output_string_2 used once
pin_connect_block_setup_for_uart0 0000007C

Symbol: pin_connect_block_setup_for_uart0
   Definitions
      At line 57 in file library7.s
   Uses
      At line 3 in file library7.s
Comment: pin_connect_block_setup_for_uart0 used once
quit 00000300

Symbol: quit
   Definitions
      At line 364 in file library7.s
   Uses
      At line 81 in file library7.s
Comment: quit used once
read_character 00000244

Symbol: read_character
   Definitions
      At line 271 in file library7.s
   Uses
      At line 7 in file library7.s
Comment: read_character used once
read_character_2 00000248

Symbol: read_character_2
   Definitions
      At line 273 in file library7.s
   Uses
      None
Comment: read_character_2 unused
read_character_break 00000260

Symbol: read_character_break
   Definitions
      At line 288 in file library7.s
   Uses
      None
Comment: read_character_break unused
setup_pins 0000009C

Symbol: setup_pins
   Definitions
      At line 67 in file library7.s
   Uses
      At line 4 in file library7.s
Comment: setup_pins used once
to_mem 000002E0

Symbol: to_mem



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 348 in file library7.s
   Uses
      None
Comment: to_mem unused
toggle_seven_seg 0000012C

Symbol: toggle_seven_seg
   Definitions
      At line 146 in file library7.s
   Uses
      At line 6 in file library7.s
Comment: toggle_seven_seg used once
tss_exit 0000014C

Symbol: tss_exit
   Definitions
      At line 169 in file library7.s
   Uses
      At line 161 in file library7.s
Comment: tss_exit used once
tss_off 00000144

Symbol: tss_off
   Definitions
      At line 163 in file library7.s
   Uses
      At line 150 in file library7.s
Comment: tss_off used once
tss_on 00000138

Symbol: tss_on
   Definitions
      At line 152 in file library7.s
   Uses
      None
Comment: tss_on unused
uart_init 00000040

Symbol: uart_init
   Definitions
      At line 37 in file library7.s
   Uses
      At line 2 in file library7.s
Comment: uart_init used once
validate_input 000000B4

Symbol: validate_input
   Definitions
      At line 77 in file library7.s
   Uses
      At line 5 in file library7.s
Comment: validate_input used once
vi_exit 000000FC

Symbol: vi_exit
   Definitions
      At line 117 in file library7.s
   Uses



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

      At line 105 in file library7.s
      At line 111 in file library7.s

vi_invalid 000000F8

Symbol: vi_invalid
   Definitions
      At line 113 in file library7.s
   Uses
      At line 90 in file library7.s
      At line 93 in file library7.s

vi_valid_letter_upper 000000F0

Symbol: vi_valid_letter_upper
   Definitions
      At line 107 in file library7.s
   Uses
      At line 99 in file library7.s
Comment: vi_valid_letter_upper used once
vi_valid_number 000000E8

Symbol: vi_valid_number
   Definitions
      At line 101 in file library7.s
   Uses
      At line 84 in file library7.s
      At line 96 in file library7.s

39 symbols
373 symbols in table
